alias d="cd ~/Documents"
alias dl="cd ~/Downloads"
alias dt="cd ~/dotfiles"
alias g="git"
alias h="history"
alias j="jobs"

alias git-cred="git config --global credential.helper osxkeychain"
alias git-line-ending="git config --global core.autocrlf input"

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
else # OS X `ls`
	colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Get week number
alias week='date +%V'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update='cd && sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; sudo gem update --system; sudo gem update'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
command -v md5sum > /dev/null || alias md5sum="md5"

# OS X has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum > /dev/null || alias sha1sum="shasum"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
[ -e "${jscbin}" ] && alias jsc="${jscbin}";
unset jscbin;

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# Ring the terminal bell, and put a badge on Terminal.app’s Dock icon
# (useful when executing time-consuming commands)
alias badge="tput bel"

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "$method"="lwp-request -m '$method'"
done

# Make Grunt print stack traces by default
command -v grunt > /dev/null && alias grunt="grunt --stack"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 7'"

# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

# Restart Apache
alias apache-rstrt="sudo apachectl restart"

# Start Apache
alias apache-strt="sudo apachectl start"

# Apache Stop
alias apache-stp="sudo apachectl stop"

# xampp
alias xampp="sudo xampp"
alias xmp-strt="xampp startapache && xampp startmysql && xampp startftp && ghngr-mvn"

#cisco ionic app
csc_directory_path="/Users/aurangzaib/Documents/Projects/cisco-support"
csc_android_path="$csc_directory_path/platforms/android/build/outputs/apk/android-debug.apk"
alias cscdir="cd $csc_directory_path"
alias csc-app="cscdir && ionic serve"
alias csc-apk-build="cscdir && ionic build android"
alias csc-apk-install="adb install -r $csc_android_path"

#ecare vault app
ecare_directory_path="~/Documents/Projects/eCareVault"
alias ecaredir="cd $ecare_directory_path"
alias cjs="ecaredir && gulp clean-js"
alias mjs="ecaredir && cjs && gulp make-js"

#socxs angular app
socxs_directory_path="/Users/aurangzaib/Documents/Projects/socxs"
alias sxdir="cd $socxs_directory_path"
alias sxe2e="sxdir && cd socxs.app/test && protractor protractor.conf.js"
alias sxunit="sxdir && cd socxs.app/test && k-t"
alias k-t="grunt karma"
alias install-headless-browser="npm install karma-phantomjs-launcher"

# ghangor frontend app
ghngr_webapp_path="/Volumes/Data/Project/Ghangor-Client/c4i/ise-c4i/src/main/webapp/"
alias ghngr-frontend="cd $ghngr_webapp_path && grunt serve"

#ghangor backend app
ghngr_directory_path="/Volumes/Data/Project/Ghangor-Client/c4i/ise-c4i"
alias ghngr-mvn="cd $ghngr_directory_path && mvn spring-boot:run"
alias ghngr-backend="xmp-strt && ghngr-mvn"

# certo cloud server
alias certo-openshift-ssh="ssh 554e1ff3fcf9331a43000158@api-certocloud.rhcloud.com"
alias certo-dir-server="prjdir && cd certo-clav/server"
alias certo-dir-client="prjdir && cd certo-clav/client"
alias certo-log="rhc tail -a api"
alias certo-server="certo-dir-server && nodemon server.js 3000"
alias certo-client="certo-dir-client && python -m SimpleHTTPServer 9000"
alias certo-restart-server="rhc app-force-stop api && rhc app-start api"
alias certo-clone-client="git clone ssh://554e1ff3fcf9331a43000158@api-certocloud.rhcloud.com/~/git/api.git/"
alias certo-clone-server="git clone ssh://554e0cb7e0b8cde7be00010b@ng-certocloud.rhcloud.com/~/git/ng.git/"

# master project directory
alias msprjdir="cd Documents/Projects/master-project/"

# python server
alias pserver="python -m SimpleHTTPServer"

# enmacc web
alias enmacc-web="prjdir && cd enmacc/enmacc-web/"
alias enmacc-e2e="prjdir && cd enmacc/enmacc-web && protractor protractor.conf.js"
alias enmacc-e2e-loop="cd && bash .enmacc-run-tests"

# ssh raspi home
alias rpi-home="ssh pi@192.168.2.103"

# backup raspi
alias rpi-backup="bash .rpibackup.sh"

# activate anaconda python environment
alias sa="source activate"
alias sad="sa carnd-term1"
alias p2="sa python_2"
alias p3="sa carnd-term1"
alias sdc="prjdir && cd self-drive"

# udacity behaviour cloning project -- term 1
alias udacity-simulator="open ~/Documents/Projects/self-drive/CarND-Behavioral-Cloning-P3/mac_sim.app"
alias udacity-server="cd ~/Documents/Projects/self-drive/CarND-Behavioral-Cloning-P3 && python drive.py"

# save by default to local instead of iCloud
alias save-to-local="defaults write -g NSDocumentSaveNewDocumentsToCloud -bool false"